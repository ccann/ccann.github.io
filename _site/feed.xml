<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure At Sea</title>
    <description>In the trenches with Clojure and Emacs.
</description>
    <link>http://ccann.github.io/</link>
    <atom:link href="http://ccann.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 13 May 2016 14:43:24 -0400</pubDate>
    <lastBuildDate>Fri, 13 May 2016 14:43:24 -0400</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Generating Random Latitudes and Longitudes</title>
        <description>&lt;p&gt;
I&#39;ve been working on an API that serves up information about geographic coordinates. At
Weft we&#39;re specifically curious about which of our shapefiles contain the coordinates in
question. In optimizing that query I had to generate a bunch of random coordinates&amp;#x2026;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #d98c10;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #34495e; font-weight: bold;&quot;&gt;-&amp;gt;coord&lt;/span&gt;
  [coord-type n]
  (&lt;span style=&quot;color: #d98c10;&quot;&gt;when&lt;/span&gt; n
    (&lt;span style=&quot;color: #d98c10;&quot;&gt;case&lt;/span&gt; coord-type
      &lt;span style=&quot;color: #e67e22;&quot;&gt;:lat&lt;/span&gt; (assert (&lt;span style=&quot;color: #d98c10;&quot;&gt;and&lt;/span&gt; (&amp;gt;= n -90) (&amp;lt;= n 90)))
      &lt;span style=&quot;color: #e67e22;&quot;&gt;:lon&lt;/span&gt; (assert (&lt;span style=&quot;color: #d98c10;&quot;&gt;and&lt;/span&gt; (&amp;gt;= n -180) (&amp;lt;= n 180))))
    (&lt;span style=&quot;color: #d98c10;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; n (double) (format &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;%.6f&quot;&lt;/span&gt;) (&lt;span style=&quot;color: #2492db;&quot;&gt;Double.&lt;/span&gt;))))

(&lt;span style=&quot;color: #d98c10;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #34495e; font-weight: bold;&quot;&gt;rand-lat&lt;/span&gt; []
  (&lt;span style=&quot;color: #d98c10;&quot;&gt;let&lt;/span&gt; [random (&lt;span style=&quot;color: #2492db;&quot;&gt;java.util.Random.&lt;/span&gt;)
        max 90
        min -90
        diff (- max min)]
    (&lt;span style=&quot;color: #d98c10;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; random (&lt;span style=&quot;color: #e74c3c; font-weight: bold;&quot;&gt;.nextDouble&lt;/span&gt;) (* diff) (+ min) (-&amp;gt;coord &lt;span style=&quot;color: #e67e22;&quot;&gt;:lat&lt;/span&gt;))))

(&lt;span style=&quot;color: #d98c10;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #34495e; font-weight: bold;&quot;&gt;rand-lon&lt;/span&gt; []
  (&lt;span style=&quot;color: #d98c10;&quot;&gt;let&lt;/span&gt; [random (&lt;span style=&quot;color: #2492db;&quot;&gt;java.util.Random.&lt;/span&gt;)
        max 180
        min -180
        diff (- max min)]
    (&lt;span style=&quot;color: #d98c10;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; random (&lt;span style=&quot;color: #e74c3c; font-weight: bold;&quot;&gt;.nextDouble&lt;/span&gt;) (* diff) (+ min) (-&amp;gt;coord &lt;span style=&quot;color: #e67e22;&quot;&gt;:lon&lt;/span&gt;))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
These basic functions turn out to be pretty nifty when you want to pass a seq of lat/lon
pairs to a function:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-clojure&quot;&gt;(get-enclosing-shapefiles @conn (&lt;span style=&quot;color: #d98c10;&quot;&gt;for&lt;/span&gt; [_ (range 100)] [(rand-lat) (rand-lon)]))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
That&#39;s all. Happy query-optimizing.
&lt;/p&gt;
</description>
        <pubDate>Thu, 05 May 2016 00:00:00 -0400</pubDate>
        <link>http://ccann.github.io/2016/05/05/random-coordinates.html</link>
        <guid isPermaLink="true">http://ccann.github.io/2016/05/05/random-coordinates.html</guid>
        
        
      </item>
    
      <item>
        <title>Gregor</title>
        <description>&lt;p&gt;
&lt;a href=&quot;https://github.com/weftio/gregor&quot;&gt;Gregor&lt;/a&gt; is an open-source Clojure interface to &lt;a href=&quot;http://kafka.apache.org/&quot;&gt;Apache Kafka&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
We use Kafka at Weft as the messaging system that ties our microservices together. Many
of those services are written in Clojure and target Kafka &lt;code&gt;0.9&lt;/code&gt;. The Kafka API is well
designed and easy to use &amp;#x2013; leveraging Clojure&#39;s Java interop in this case is fairly
straightforward, but we wanted something more idiomatic and consistent throughout our
pipeline. Gregor was born out of that need.
&lt;/p&gt;

&lt;p&gt;
There are other Kafka libraries available for Clojure including &lt;a href=&quot;https://github.com/pingles/clj-kafka&quot;&gt;&lt;code&gt;clj-kafka&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://github.com/gerritjvv/kafka-fast&quot;&gt;&lt;code&gt;kafka-fast&lt;/code&gt;&lt;/a&gt;. At this time of this writing &lt;code&gt;clj-kafka&lt;/code&gt; targets Kafka &lt;code&gt;0.8&lt;/code&gt; which was a
non-starter for us. &lt;code&gt;kafka-fast&lt;/code&gt; swaps out Zookeeper for Redis which wasn&#39;t quite what we
wanted, either. Gregor strives only to be an idiomatic, lightweight set of functions that
are easy to reason about and use in combination with Kafka&#39;s Java classes when
necessary.
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgheadline1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgheadline1&quot;&gt;Consumer API&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgheadline1&quot;&gt;
&lt;p&gt;
Here&#39;s a direct comparison of constructing a &lt;code&gt;KafkaConsumer&lt;/code&gt; &lt;a href=&quot;http://kafka.apache.org/090/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaConsumer.html&quot;&gt;using the Java API&lt;/a&gt; and
Gregor&#39;s Clojure API:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #2492db;&quot;&gt;Properties&lt;/span&gt; &lt;span style=&quot;color: #8e44ad;&quot;&gt;props&lt;/span&gt; = &lt;span style=&quot;color: #d98c10;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #2492db;&quot;&gt;Properties&lt;/span&gt;();
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;bootstrap.servers&quot;&lt;/span&gt;, &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;localhost:9092&quot;&lt;/span&gt;);
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;group.id&quot;&lt;/span&gt;, &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;test&quot;&lt;/span&gt;);
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;enable.auto.commit&quot;&lt;/span&gt;, &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;true&quot;&lt;/span&gt;);
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;auto.commit.interval.ms&quot;&lt;/span&gt;, &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;1000&quot;&lt;/span&gt;);
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;session.timeout.ms&quot;&lt;/span&gt;, &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;30000&quot;&lt;/span&gt;);
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;key.deserializer&quot;&lt;/span&gt;, &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;&lt;/span&gt;);
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;value.deserializer&quot;&lt;/span&gt;, &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;&lt;/span&gt;);

&lt;span style=&quot;color: #2492db;&quot;&gt;KafkaConsumer&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #2492db;&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color: #2492db;&quot;&gt;String&lt;/span&gt;&amp;gt; &lt;span style=&quot;color: #8e44ad;&quot;&gt;consumer&lt;/span&gt; = &lt;span style=&quot;color: #d98c10;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #2492db;&quot;&gt;KafkaConsumer&lt;/span&gt;&amp;lt;&amp;gt;(props);
consumer.subscribe(Arrays.asList(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;bar&quot;&lt;/span&gt;));

&lt;span style=&quot;color: #d98c10;&quot;&gt;while&lt;/span&gt; (&lt;span style=&quot;color: #e67e22;&quot;&gt;true&lt;/span&gt;) {
    &lt;span style=&quot;color: #2492db;&quot;&gt;ConsumerRecords&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #2492db;&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color: #2492db;&quot;&gt;String&lt;/span&gt;&amp;gt; &lt;span style=&quot;color: #8e44ad;&quot;&gt;records&lt;/span&gt; = consumer.poll(100);
    &lt;span style=&quot;color: #d98c10;&quot;&gt;for&lt;/span&gt; (ConsumerRecord&amp;lt;&lt;span style=&quot;color: #2492db;&quot;&gt;String&lt;/span&gt;, String&amp;gt; record : records)
        System.out.printf(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;offset = %d, key = %s, value = %s&quot;&lt;/span&gt;, record.offset(), record.key(), record.value());
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #d98c10;&quot;&gt;ns&lt;/span&gt; &lt;span style=&quot;color: #2492db;&quot;&gt;gregor-sample-app.core&lt;/span&gt;
  (&lt;span style=&quot;color: #e67e22;&quot;&gt;:require&lt;/span&gt; [&lt;span style=&quot;color: #2492db;&quot;&gt;gregor.core&lt;/span&gt; &lt;span style=&quot;color: #e67e22;&quot;&gt;:as&lt;/span&gt; gregor]))

(&lt;span style=&quot;color: #d98c10;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #8e44ad;&quot;&gt;props&lt;/span&gt; {&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;auto.offset.reset&quot;&lt;/span&gt;       &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;earliest&quot;&lt;/span&gt;
            &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;auto.commit.interval.ms&quot;&lt;/span&gt; &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;1000&quot;&lt;/span&gt;
            &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;enable.auto.commit&quot;&lt;/span&gt;      &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;true&quot;&lt;/span&gt;
            &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;session.timeout.ms&quot;&lt;/span&gt;      &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;30000&quot;&lt;/span&gt;})

(&lt;span style=&quot;color: #d98c10;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #8e44ad;&quot;&gt;consumer&lt;/span&gt; (&lt;span style=&quot;color: #2492db;&quot;&gt;gregor&lt;/span&gt;&lt;span style=&quot;color: #2c3e50; background-color: #ecf0f1;&quot;&gt;/&lt;/span&gt;consumer &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;localhost:9092&quot;&lt;/span&gt; &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;test&quot;&lt;/span&gt; [&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;bar&quot;&lt;/span&gt;] props))

(while &lt;span style=&quot;color: #e67e22;&quot;&gt;true&lt;/span&gt;
    (&lt;span style=&quot;color: #d98c10;&quot;&gt;let&lt;/span&gt; [consumer-records (&lt;span style=&quot;color: #2492db;&quot;&gt;gregor&lt;/span&gt;&lt;span style=&quot;color: #2c3e50; background-color: #ecf0f1;&quot;&gt;/&lt;/span&gt;poll consumer 100)]
      (&lt;span style=&quot;color: #d98c10;&quot;&gt;doseq&lt;/span&gt; [{&lt;span style=&quot;color: #e67e22;&quot;&gt;:keys&lt;/span&gt; [offset key value]} recs]
        (println &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;offset = &quot;&lt;/span&gt; offset &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;, key = &quot;&lt;/span&gt; key &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;, value = &quot;&lt;/span&gt; value))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Excellent, clojure data structures and functions. Though in fact, using Java interop
would look pretty similar to the Gregor code above. The &lt;code&gt;consumer&lt;/code&gt; function defaults to
using &lt;code&gt;StringDeserializer&lt;/code&gt; for both key and value deserializers, but you can specify a
different one in the (optional) &lt;code&gt;props&lt;/code&gt; map.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgheadline2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgheadline2&quot;&gt;Producer API&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgheadline2&quot;&gt;
&lt;p&gt;
Now let&#39;s take a look at the &lt;code&gt;KafkaProducer&lt;/code&gt; &lt;a href=&quot;https://kafka.apache.org/090/javadoc/index.html?org/apache/kafka/clients/producer/KafkaProducer.html&quot;&gt;example&lt;/a&gt;.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #2492db;&quot;&gt;Properties&lt;/span&gt; &lt;span style=&quot;color: #8e44ad;&quot;&gt;props&lt;/span&gt; = &lt;span style=&quot;color: #d98c10;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #2492db;&quot;&gt;Properties&lt;/span&gt;();
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;bootstrap.servers&quot;&lt;/span&gt;, &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;localhost:4242&quot;&lt;/span&gt;);
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;acks&quot;&lt;/span&gt;, &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;all&quot;&lt;/span&gt;);
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;retries&quot;&lt;/span&gt;, 0);
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;batch.size&quot;&lt;/span&gt;, 16384);
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;linger.ms&quot;&lt;/span&gt;, 1);
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;buffer.memory&quot;&lt;/span&gt;, 33554432);
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;key.serializer&quot;&lt;/span&gt;, &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;org.apache.kafka.common.serialization.StringSerializer&quot;&lt;/span&gt;);
props.put(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;value.serializer&quot;&lt;/span&gt;, &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;org.apache.kafka.common.serialization.StringSerializer&quot;&lt;/span&gt;);

&lt;span style=&quot;color: #2492db;&quot;&gt;Producer&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #2492db;&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color: #2492db;&quot;&gt;String&lt;/span&gt;&amp;gt; &lt;span style=&quot;color: #8e44ad;&quot;&gt;producer&lt;/span&gt; = &lt;span style=&quot;color: #d98c10;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #2492db;&quot;&gt;KafkaProducer&lt;/span&gt;&amp;lt;&amp;gt;(props);
&lt;span style=&quot;color: #d98c10;&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color: #2492db;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #8e44ad;&quot;&gt;i&lt;/span&gt; = 0; i &amp;lt; 100; i++)
    producer.send(&lt;span style=&quot;color: #d98c10;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #2492db;&quot;&gt;ProducerRecord&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #2492db;&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color: #2492db;&quot;&gt;String&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;my-topic&quot;&lt;/span&gt;, Integer.toString(i)));

producer.close();
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #d98c10;&quot;&gt;ns&lt;/span&gt; &lt;span style=&quot;color: #2492db;&quot;&gt;gregor-sample-app.core&lt;/span&gt;
  (&lt;span style=&quot;color: #e67e22;&quot;&gt;:require&lt;/span&gt; [&lt;span style=&quot;color: #2492db;&quot;&gt;gregor.core&lt;/span&gt; &lt;span style=&quot;color: #e67e22;&quot;&gt;:as&lt;/span&gt; gregor]))

(&lt;span style=&quot;color: #d98c10;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #8e44ad;&quot;&gt;props&lt;/span&gt; {&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;acks&quot;&lt;/span&gt;              &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;all&quot;&lt;/span&gt;
            &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;retries&quot;&lt;/span&gt;           0
            &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;batch.size&quot;&lt;/span&gt;        16384
            &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;linger.ms&quot;&lt;/span&gt;         1
            &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;buffer.memory&quot;&lt;/span&gt;     33554432
            &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;auto.offset.reset&quot;&lt;/span&gt; &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;earliest&quot;&lt;/span&gt;})

(&lt;span style=&quot;color: #d98c10;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #8e44ad;&quot;&gt;producer&lt;/span&gt; (&lt;span style=&quot;color: #2492db;&quot;&gt;gregor&lt;/span&gt;&lt;span style=&quot;color: #2c3e50; background-color: #ecf0f1;&quot;&gt;/&lt;/span&gt;producer &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;localhost:4242&quot;&lt;/span&gt; props))

(&lt;span style=&quot;color: #d98c10;&quot;&gt;dotimes&lt;/span&gt; [i 100] (&lt;span style=&quot;color: #2492db;&quot;&gt;gregor&lt;/span&gt;&lt;span style=&quot;color: #2c3e50; background-color: #ecf0f1;&quot;&gt;/&lt;/span&gt;send producer &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;my-topic&quot;&lt;/span&gt; (str i)))

(&lt;span style=&quot;color: #2492db;&quot;&gt;gregor&lt;/span&gt;&lt;span style=&quot;color: #2c3e50; background-color: #ecf0f1;&quot;&gt;/&lt;/span&gt;close producer)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Just like the Consumer, the Producer defaults to &lt;code&gt;StringSerializer&lt;/code&gt; for both keys and
values. Also noteworthy is that the &lt;code&gt;send&lt;/code&gt; function has multiple arities that allow you
to specify the partition to which the record should be sent, the record &lt;code&gt;key&lt;/code&gt;, and a
callback in addition to the value.
&lt;/p&gt;

&lt;p&gt;
In a future post I&#39;ll cover at-least-once processing semantics with Gregor and using lazy
sequences to consume records.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 05 May 2016 00:00:00 -0400</pubDate>
        <link>http://ccann.github.io/2016/05/05/gregor.html</link>
        <guid isPermaLink="true">http://ccann.github.io/2016/05/05/gregor.html</guid>
        
        
      </item>
    
      <item>
        <title>Print to the Same Line in Python</title>
        <description>&lt;p&gt;
TIL that Python has a sort of unexpected syntax for printing to the same line:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #d98c10;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&#39;publish JSON to RabbitMQ exchange...   &#39;&lt;/span&gt;),
publish_json()
&lt;span style=&quot;color: #d98c10;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #0a74b9;&quot;&gt;&#39;[DONE]&#39;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-shell&quot;&gt;&amp;gt;&amp;gt;&amp;gt; publish JSON to RabbitMQ exchange...    [DONE]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Yes, that dangling comma.
&lt;/p&gt;

&lt;p&gt;
More &lt;a href=&quot;http://stackoverflow.com/questions/5598181/python-print-on-same-line&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://ccann.github.io/2016/01/22/python-print-same-line.html</link>
        <guid isPermaLink="true">http://ccann.github.io/2016/01/22/python-print-same-line.html</guid>
        
        
      </item>
    
      <item>
        <title>Hot CIDER Commands</title>
        <description>&lt;p&gt;
When I first started using CIDER I was intimidated by the block of 41 &lt;code&gt;cider-mode&lt;/code&gt; and 25
&lt;code&gt;cider-repl-mode&lt;/code&gt; interactive commands (to be fair, there&#39;s a lot of overlap between the
two). Luckily you only need a small subset of these commands at your fingertips to be very
productive:
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgheadline1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgheadline1&quot;&gt;REPLs and Namespaces&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgheadline1&quot;&gt;
&lt;p&gt;
Open a project file (created with Leiningen or Boot) and in that buffer &lt;code&gt;C-c M-j&lt;/code&gt; to
launch an nREPL server and corresponding REPL client. This client will be associated with
your project. You can see the nREPL server in the mode line &amp;#x2013; in my case:
&lt;code&gt;cider[clj:demo@:51099]&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
You&#39;re done with your REPL and you want to quit: &lt;code&gt;C-c C-q&lt;/code&gt;. This is one of those commands I wish
I&#39;d seen earlier. I spent so much time killing nREPL buffers manually.
&lt;/p&gt;

&lt;p&gt;
From your clojure buffer you can use &lt;code&gt;C-c C-n&lt;/code&gt; to switch to this namespace in the REPL. &lt;code&gt;C-c
C-z&lt;/code&gt; actually switches to the associated REPL buffer (and back!).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-orgheadline2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgheadline2&quot;&gt;Evaluating Functions&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgheadline2&quot;&gt;
&lt;p&gt;
Load your current buffer with &lt;code&gt;C-c C-k&lt;/code&gt;. You can do form evaluation a few different ways, here are
the basics:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;code&gt;C-c C-e&lt;/code&gt;: eval the form &lt;i&gt;to the left&lt;/i&gt; of the cursor (the pipe below) and show the
result inline.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-clojure&quot;&gt;(map #(* &lt;span style=&quot;color: #8e44ad;&quot;&gt;%&lt;/span&gt; &lt;span style=&quot;color: #8e44ad;&quot;&gt;%&lt;/span&gt;) (take 5 (range))|) =&amp;gt; (0 1 2 3 4)
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
&lt;code&gt;C-c C-c&lt;/code&gt;: eval the &lt;i&gt;top-level&lt;/i&gt; form at point and show the result inline.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-clojure&quot;&gt;(map #(* &lt;span style=&quot;color: #8e44ad;&quot;&gt;%&lt;/span&gt; &lt;span style=&quot;color: #8e44ad;&quot;&gt;%&lt;/span&gt;) (take 5 (range))|) =&amp;gt; (0 1 4 9 16)
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;b&gt;Bonus&lt;/b&gt;: Try &lt;code&gt;C-c C-p&lt;/code&gt; and &lt;code&gt;C-c C-f&lt;/code&gt; for pretty-printed popup buffer versions of the previous two
evals, respectively. Useful for copying output.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgheadline3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgheadline3&quot;&gt;Other Useful Tools&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgheadline3&quot;&gt;
&lt;p&gt;
A few other basic but high impact functions include:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Jump you to the definition of the symbol at point with &lt;code&gt;M-.&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;See clojure docs for the symbol at point via &lt;code&gt;C-c C-d d&lt;/code&gt; and java docs with &lt;code&gt;C-c C-d j&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the REPL &lt;code&gt;C-c C-o&lt;/code&gt; will remove the result of the previous evaluation, useful especially when
you have a verbose output clogging up your workspace. With the prefix argument, &lt;code&gt;C-u&lt;/code&gt;, it will
remove all previous output.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 05 Nov 2015 00:00:00 -0500</pubDate>
        <link>http://ccann.github.io/2015/11/05/cider-workflow.html</link>
        <guid isPermaLink="true">http://ccann.github.io/2015/11/05/cider-workflow.html</guid>
        
        
      </item>
    
      <item>
        <title>A Basic CIDER Configuration with use-package</title>
        <description>&lt;p&gt;
&lt;a href=&quot;https://github.com/clojure-emacs/cider&quot;&gt;&lt;code&gt;CIDER&lt;/code&gt;&lt;/a&gt; is a Clojure IDE for Emacs.
&lt;/p&gt;


&lt;br&gt;
&lt;image src=&quot;/assets/cider.png&quot; class=&quot;resizing-img&quot; style=&quot;padding: 15px;&quot;/&gt;
&lt;br&gt;&lt;br&gt;


&lt;p&gt;
CIDER provides a lot of really useful utilities for working with clojure. That said, it
took me a while to get comfortable. Together with &lt;code&gt;clj-refactor&lt;/code&gt; and &lt;code&gt;clojure-mode&lt;/code&gt; the
host of configuration options and keybindings can be totally overwhelming. I&#39;ll explain
my configuration and workflow below in hopes that it provides a nice starting point.
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgheadline1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgheadline1&quot;&gt;Emacs Configuration&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgheadline1&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/jwiegley/use-package&quot;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; is a macro for
configuring packages in emacs. Let&#39;s use it to configure &lt;code&gt;clojure-mode&lt;/code&gt; first.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #d98c10;&quot;&gt;use-package&lt;/span&gt; &lt;span style=&quot;color: #e67e22;&quot;&gt;clojure-mode&lt;/span&gt;
  &lt;span style=&quot;color: #16a085;&quot;&gt;:ensure&lt;/span&gt; t
  &lt;span style=&quot;color: #16a085;&quot;&gt;:mode&lt;/span&gt; ((&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;\\.clj\\&#39;&quot;&lt;/span&gt; . clojure-mode)
         (&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;\\.edn\\&#39;&quot;&lt;/span&gt; . clojure-mode))
  &lt;span style=&quot;color: #16a085;&quot;&gt;:init&lt;/span&gt;
  (add-hook &#39;clojure-mode-hook #&#39;yas-minor-mode)         
  (add-hook &#39;clojure-mode-hook #&#39;linum-mode)             
  (add-hook &#39;clojure-mode-hook #&#39;subword-mode)           
  (add-hook &#39;clojure-mode-hook #&#39;smartparens-mode)       
  (add-hook &#39;clojure-mode-hook #&#39;rainbow-delimiters-mode)
  (add-hook &#39;clojure-mode-hook #&#39;eldoc-mode)             
  (add-hook &#39;clojure-mode-hook #&#39;idle-highlight-mode))
&lt;/pre&gt;
&lt;/div&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;I always want &lt;code&gt;clojure-mode&lt;/code&gt; installed on my system so I designate &lt;code&gt;:ensure t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;activate &lt;code&gt;clojure-mode&lt;/code&gt; whenever I open a file with the &lt;code&gt;.clj&lt;/code&gt; or &lt;code&gt;.edn&lt;/code&gt; extensions&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;:init&lt;/code&gt; to add hooks for minor-modes we want activated before the &lt;code&gt;clojure-mode&lt;/code&gt;
package is loaded. These are just some of the minor-modes &lt;span class=&quot;underline&quot;&gt;I personally&lt;/span&gt; find useful
when writing clojure. You&#39;ll have to ensure that these modes are installed
separately.&lt;a href=&quot;https://github.com/Fuco1/smartparens&quot;&gt;&lt;code&gt;smartparens-mode&lt;/code&gt;&lt;/a&gt; and similar modes like &lt;a href=&quot;http://emacsrocks.com/e14.html&quot;&gt;&lt;code&gt;paredit&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;&lt;code&gt;lispy&lt;/code&gt;&lt;/a&gt; are quite
useful for programming in languages with nested delimeters like Clojure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;br &gt;
Now let&#39;s configure CIDER:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #d98c10;&quot;&gt;use-package&lt;/span&gt; &lt;span style=&quot;color: #e67e22;&quot;&gt;cider&lt;/span&gt;
  &lt;span style=&quot;color: #16a085;&quot;&gt;:ensure&lt;/span&gt; t
  &lt;span style=&quot;color: #16a085;&quot;&gt;:defer&lt;/span&gt; t
  &lt;span style=&quot;color: #16a085;&quot;&gt;:init&lt;/span&gt; (add-hook &#39;cider-mode-hook #&#39;clj-refactor-mode)
  &lt;span style=&quot;color: #16a085;&quot;&gt;:diminish&lt;/span&gt; subword-mode
  &lt;span style=&quot;color: #16a085;&quot;&gt;:config&lt;/span&gt;
  (setq nrepl-log-messages t                  
        cider-repl-display-in-current-window t
        cider-repl-use-clojure-font-lock t    
        cider-prompt-save-file-on-load &#39;always-save
        cider-font-lock-dynamically &#39;(macro core function var)
        nrepl-hide-special-buffers t            
        cider-overlays-use-font-lock t)         
  (cider-repl-toggle-pretty-printing))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
What&#39;s going on here?
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;ensure cider is installed&lt;/li&gt;
&lt;li&gt;activate &lt;code&gt;clj-refactor-mode&lt;/code&gt; with &lt;code&gt;cider&lt;/code&gt; with &lt;code&gt;add-hook&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:diminish&lt;/code&gt; hides the &lt;code&gt;subword-mode&lt;/code&gt; minor mode symbol from the mode-line if
&lt;code&gt;diminish.el&lt;/code&gt; is installed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;br &gt;
The &lt;code&gt;:config&lt;/code&gt; keyword specifies code to be executed after the package is loaded. Here
we configure some of cider&#39;s variables. Each of the following settings is explained in
detail in &lt;a href=&quot;https://github.com/clojure-emacs/cider&quot;&gt;the CIDER readme&lt;/a&gt; too:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;code&gt;nrepl-log-messages&lt;/code&gt;: useful for debugging&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider-repl-display-in-current-window&lt;/code&gt;: switch to REPL in this window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider-repl-use-clojure-font-lock&lt;/code&gt;: syntax highlighting in REPL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider-prompt-save-file-on-load&lt;/code&gt;: just always save when loading buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider-font-lock-dynamically&lt;/code&gt;: syntax highlight all namespaces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nrepl-hide-special-buffers&lt;/code&gt;: hide nrepl buffers from menu&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider-overlays-use-font-lock&lt;/code&gt;: syntax highlight evaluation overlays&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider-repl-toggle-pretty-printing&lt;/code&gt;: REPL always pretty-prints results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;br &gt;
I&#39;ll leave you with some of the other package configurations for related modes
(some referenced above). Enjoy!:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #d98c10;&quot;&gt;use-package&lt;/span&gt; &lt;span style=&quot;color: #e67e22;&quot;&gt;cider-eval-sexp-fu&lt;/span&gt;
  &lt;span style=&quot;color: #16a085;&quot;&gt;:defer&lt;/span&gt; t)

(&lt;span style=&quot;color: #d98c10;&quot;&gt;use-package&lt;/span&gt; &lt;span style=&quot;color: #e67e22;&quot;&gt;clj-refactor&lt;/span&gt;
  &lt;span style=&quot;color: #16a085;&quot;&gt;:defer&lt;/span&gt; t
  &lt;span style=&quot;color: #16a085;&quot;&gt;:ensure&lt;/span&gt; t
  &lt;span style=&quot;color: #16a085;&quot;&gt;:diminish&lt;/span&gt; clj-refactor-mode
  &lt;span style=&quot;color: #16a085;&quot;&gt;:config&lt;/span&gt; (cljr-add-keybindings-with-prefix &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;C-c C-m&quot;&lt;/span&gt;))

(&lt;span style=&quot;color: #d98c10;&quot;&gt;use-package&lt;/span&gt; &lt;span style=&quot;color: #e67e22;&quot;&gt;smartparens&lt;/span&gt;
  &lt;span style=&quot;color: #16a085;&quot;&gt;:defer&lt;/span&gt; t
  &lt;span style=&quot;color: #16a085;&quot;&gt;:ensure&lt;/span&gt; t
  &lt;span style=&quot;color: #16a085;&quot;&gt;:diminish&lt;/span&gt; smartparens-mode
  &lt;span style=&quot;color: #16a085;&quot;&gt;:init&lt;/span&gt;
  (setq sp-override-key-bindings
        &#39;((&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;C-&amp;lt;right&amp;gt;&quot;&lt;/span&gt; . nil)
          (&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;C-&amp;lt;left&amp;gt;&quot;&lt;/span&gt; . nil)
          (&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;C-)&quot;&lt;/span&gt; . sp-forward-slurp-sexp)
          (&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;M-&amp;lt;backspace&amp;gt;&quot;&lt;/span&gt; . nil)
          (&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;C-(&quot;&lt;/span&gt; . sp-forward-barf-sexp)))
  &lt;span style=&quot;color: #16a085;&quot;&gt;:config&lt;/span&gt;
  (&lt;span style=&quot;color: #d98c10;&quot;&gt;use-package&lt;/span&gt; &lt;span style=&quot;color: #e67e22;&quot;&gt;smartparens-config&lt;/span&gt;)
  (sp-use-smartparens-bindings)
  (sp--update-override-key-bindings)
  &lt;span style=&quot;color: #16a085;&quot;&gt;:commands&lt;/span&gt; (smartparens-mode show-smartparens-mode))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Up next I&#39;ll cover a digestible subset of CIDER commands&amp;#x2026;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 18 Oct 2015 00:00:00 -0400</pubDate>
        <link>http://ccann.github.io/2015/10/18/cider.html</link>
        <guid isPermaLink="true">http://ccann.github.io/2015/10/18/cider.html</guid>
        
        <category>emacs</category>
        
        <category>cider</category>
        
        <category>clojure</category>
        
        
      </item>
    
  </channel>
</rss>
