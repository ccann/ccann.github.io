<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure At Sea</title>
    <description>In the trenches with Clojure and Emacs.
</description>
    <link>http://ccann.github.io/</link>
    <atom:link href="http://ccann.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 24 Apr 2016 17:41:56 -0400</pubDate>
    <lastBuildDate>Sun, 24 Apr 2016 17:41:56 -0400</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>TIL Print to the Same Line in Python</title>
        <description>&lt;p&gt;
Today I learned that Python has a sort of unexpected syntax for printing to the same
line:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #DD6F48;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #528B8B;&quot;&gt;&#39;publish JSON to RabbitMQ exchange...   &#39;&lt;/span&gt;),
publish_json()
&lt;span style=&quot;color: #DD6F48;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #528B8B;&quot;&gt;&#39;[DONE]&#39;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-shell&quot;&gt;&amp;gt;&amp;gt;&amp;gt; publish JSON to RabbitMQ exchange...    [DONE]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Yes, that dangling comma.
&lt;/p&gt;



&lt;p&gt;
More &lt;a href=&quot;http://stackoverflow.com/questions/5598181/python-print-on-same-line&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://ccann.github.io/2016/01/22/python-print-same-line.html</link>
        <guid isPermaLink="true">http://ccann.github.io/2016/01/22/python-print-same-line.html</guid>
        
        
      </item>
    
      <item>
        <title>Hot CIDER Commands</title>
        <description>&lt;p&gt;
When I first started using CIDER I was intimidated by the block of 41 &lt;code&gt;cider-mode&lt;/code&gt; and 25
&lt;code&gt;cider-repl-mode&lt;/code&gt; interactive commands (to be fair, there&#39;s a lot of overlap between the
two). Luckily you only need a small subset of these commands at your fingertips to be very
productive:
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgheadline1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgheadline1&quot;&gt;REPLs and Namespaces&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgheadline1&quot;&gt;
&lt;p&gt;
Open a project file (created with Leiningen or Boot) and in that buffer &lt;code&gt;C-c M-j&lt;/code&gt; to
launch an nREPL server and corresponding REPL client. This client will be associated with
your project. You can see the nREPL server in the mode line &amp;#x2013; in my case:
&lt;code&gt;cider[clj:demo@:51099]&lt;/code&gt;:
&lt;/p&gt;

&lt;p&gt;
You&#39;re done with your REPL and you want to quit: &lt;code&gt;C-c C-q&lt;/code&gt;. This is one of those commands I wish
I&#39;d seen earlier. I spent so much time killing nREPL buffers manually.
&lt;/p&gt;

&lt;p&gt;
From your clojure buffer you can use &lt;code&gt;C-c C-n&lt;/code&gt; to switch to this namespace in the REPL. &lt;code&gt;C-c
C-z&lt;/code&gt; actually switches to the associated REPL buffer (and back!).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-orgheadline2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgheadline2&quot;&gt;Evaluating Functions&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgheadline2&quot;&gt;
&lt;p&gt;
Load your current buffer with &lt;code&gt;C-c C-k&lt;/code&gt;. You can do form evaluation a few different ways, here are
the basics:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;code&gt;C-c C-e&lt;/code&gt;: eval the form &lt;i&gt;to the left&lt;/i&gt; of the cursor (the pipe below) and show the
result inline.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-clojure&quot;&gt;(map #(* &lt;span style=&quot;color: #8e44ad;&quot;&gt;%&lt;/span&gt; &lt;span style=&quot;color: #8e44ad;&quot;&gt;%&lt;/span&gt;) (take 5 (range))|) =&amp;gt; (0 1 2 3 4)
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
&lt;code&gt;C-c C-c&lt;/code&gt;: eval the &lt;i&gt;top-level&lt;/i&gt; form at point and show the result inline.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-clojure&quot;&gt;(map #(* &lt;span style=&quot;color: #8e44ad;&quot;&gt;%&lt;/span&gt; &lt;span style=&quot;color: #8e44ad;&quot;&gt;%&lt;/span&gt;) (take 5 (range))|) =&amp;gt; (0 1 4 9 16)
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;b&gt;Bonus&lt;/b&gt;: Try &lt;code&gt;C-c C-p&lt;/code&gt; and &lt;code&gt;C-c C-f&lt;/code&gt; for pretty-printed popup buffer versions of the previous two
evals, respectively. Useful for copying output.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgheadline3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgheadline3&quot;&gt;Other Useful Tools&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgheadline3&quot;&gt;
&lt;p&gt;
A few other basic but high impact functions include:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Jump you to the definition of the symbol at point with &lt;code&gt;M-.&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;See clojure docs for the symbol at point via &lt;code&gt;C-c C-d d&lt;/code&gt; and java docs with &lt;code&gt;C-c C-d j&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the REPL &lt;code&gt;C-c C-o&lt;/code&gt; will remove the result of the previous evaluation, useful especially when
you have a verbose output clogging up your workspace. With the prefix argument, &lt;code&gt;C-u&lt;/code&gt;, it will
remove all previous output.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 05 Nov 2015 00:00:00 -0500</pubDate>
        <link>http://ccann.github.io/2015/11/05/cider-workflow.html</link>
        <guid isPermaLink="true">http://ccann.github.io/2015/11/05/cider-workflow.html</guid>
        
        
      </item>
    
      <item>
        <title>A Basic CIDER Configuration with use-package</title>
        <description>&lt;p&gt;
&lt;a href=&quot;https://github.com/clojure-emacs/cider&quot;&gt;&lt;code&gt;CIDER&lt;/code&gt;&lt;/a&gt; is a Clojure IDE for Emacs.
&lt;/p&gt;


&lt;br&gt;
&lt;image src=&quot;/assets/cider.png&quot; class=&quot;resizing-img&quot; style=&quot;padding: 15px;&quot;/&gt;
&lt;br&gt;&lt;br&gt;


&lt;p&gt;
CIDER provides a lot of really useful utilities for working with clojure. That said, it
took me a while to get comfortable. Together with &lt;code&gt;clj-refactor&lt;/code&gt; and &lt;code&gt;clojure-mode&lt;/code&gt; the
host of configuration options and keybindings can be totally overwhelming. I&#39;ll explain
my configuration and workflow below in hopes that it provides a nice starting point.
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgheadline1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgheadline1&quot;&gt;Emacs Configuration&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgheadline1&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/jwiegley/use-package&quot;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; is a macro for
configuring packages in emacs. Let&#39;s use it to configure &lt;code&gt;clojure-mode&lt;/code&gt; first.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #d98c10;&quot;&gt;use-package&lt;/span&gt; &lt;span style=&quot;color: #e67e22;&quot;&gt;clojure-mode&lt;/span&gt;
  &lt;span style=&quot;color: #16a085;&quot;&gt;:ensure&lt;/span&gt; t
  &lt;span style=&quot;color: #16a085;&quot;&gt;:mode&lt;/span&gt; ((&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;\\.clj\\&#39;&quot;&lt;/span&gt; . clojure-mode)
         (&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;\\.edn\\&#39;&quot;&lt;/span&gt; . clojure-mode))
  &lt;span style=&quot;color: #16a085;&quot;&gt;:init&lt;/span&gt;
  (add-hook &#39;clojure-mode-hook #&#39;yas-minor-mode)         
  (add-hook &#39;clojure-mode-hook #&#39;linum-mode)             
  (add-hook &#39;clojure-mode-hook #&#39;subword-mode)           
  (add-hook &#39;clojure-mode-hook #&#39;smartparens-mode)       
  (add-hook &#39;clojure-mode-hook #&#39;rainbow-delimiters-mode)
  (add-hook &#39;clojure-mode-hook #&#39;eldoc-mode)             
  (add-hook &#39;clojure-mode-hook #&#39;idle-highlight-mode))
&lt;/pre&gt;
&lt;/div&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;I always want &lt;code&gt;clojure-mode&lt;/code&gt; installed on my system so I designate &lt;code&gt;:ensure t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;activate &lt;code&gt;clojure-mode&lt;/code&gt; whenever I open a file with the &lt;code&gt;.clj&lt;/code&gt; or &lt;code&gt;.edn&lt;/code&gt; extensions&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;:init&lt;/code&gt; to add hooks for minor-modes we want activated before the &lt;code&gt;clojure-mode&lt;/code&gt;
package is loaded. These are just some of the minor-modes &lt;span class=&quot;underline&quot;&gt;I personally&lt;/span&gt; find useful
when writing clojure. You&#39;ll have to ensure that these modes are installed
separately.&lt;a href=&quot;https://github.com/Fuco1/smartparens&quot;&gt;&lt;code&gt;smartparens-mode&lt;/code&gt;&lt;/a&gt; and similar modes like &lt;a href=&quot;http://emacsrocks.com/e14.html&quot;&gt;&lt;code&gt;paredit&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;&lt;code&gt;lispy&lt;/code&gt;&lt;/a&gt; are quite
useful for programming in languages with nested delimeters like Clojure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;br &gt;
Now let&#39;s configure CIDER:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #d98c10;&quot;&gt;use-package&lt;/span&gt; &lt;span style=&quot;color: #e67e22;&quot;&gt;cider&lt;/span&gt;
  &lt;span style=&quot;color: #16a085;&quot;&gt;:ensure&lt;/span&gt; t
  &lt;span style=&quot;color: #16a085;&quot;&gt;:defer&lt;/span&gt; t
  &lt;span style=&quot;color: #16a085;&quot;&gt;:init&lt;/span&gt; (add-hook &#39;cider-mode-hook #&#39;clj-refactor-mode)
  &lt;span style=&quot;color: #16a085;&quot;&gt;:diminish&lt;/span&gt; subword-mode
  &lt;span style=&quot;color: #16a085;&quot;&gt;:config&lt;/span&gt;
  (setq nrepl-log-messages t                  
        cider-repl-display-in-current-window t
        cider-repl-use-clojure-font-lock t    
        cider-prompt-save-file-on-load &#39;always-save
        cider-font-lock-dynamically &#39;(macro core function var)
        nrepl-hide-special-buffers t            
        cider-overlays-use-font-lock t)         
  (cider-repl-toggle-pretty-printing))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
What&#39;s going on here?
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;ensure cider is installed&lt;/li&gt;
&lt;li&gt;activate &lt;code&gt;clj-refactor-mode&lt;/code&gt; with &lt;code&gt;cider&lt;/code&gt; with &lt;code&gt;add-hook&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:diminish&lt;/code&gt; hides the &lt;code&gt;subword-mode&lt;/code&gt; minor mode symbol from the mode-line if
&lt;code&gt;diminish.el&lt;/code&gt; is installed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;br &gt;
The &lt;code&gt;:config&lt;/code&gt; keyword specifies code to be executed after the package is loaded. Here
we configure some of cider&#39;s variables. Each of the following settings is explained in
detail in &lt;a href=&quot;https://github.com/clojure-emacs/cider&quot;&gt;the CIDER readme&lt;/a&gt; too:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;code&gt;nrepl-log-messages&lt;/code&gt;: useful for debugging&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider-repl-display-in-current-window&lt;/code&gt;: switch to REPL in this window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider-repl-use-clojure-font-lock&lt;/code&gt;: syntax highlighting in REPL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider-prompt-save-file-on-load&lt;/code&gt;: just always save when loading buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider-font-lock-dynamically&lt;/code&gt;: syntax highlight all namespaces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nrepl-hide-special-buffers&lt;/code&gt;: hide nrepl buffers from menu&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider-overlays-use-font-lock&lt;/code&gt;: syntax highlight evaluation overlays&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider-repl-toggle-pretty-printing&lt;/code&gt;: REPL always pretty-prints results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;br &gt;
I&#39;ll leave you with some of the other package configurations for related modes
(some referenced above). Enjoy!:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #d98c10;&quot;&gt;use-package&lt;/span&gt; &lt;span style=&quot;color: #e67e22;&quot;&gt;cider-eval-sexp-fu&lt;/span&gt;
  &lt;span style=&quot;color: #16a085;&quot;&gt;:defer&lt;/span&gt; t)

(&lt;span style=&quot;color: #d98c10;&quot;&gt;use-package&lt;/span&gt; &lt;span style=&quot;color: #e67e22;&quot;&gt;clj-refactor&lt;/span&gt;
  &lt;span style=&quot;color: #16a085;&quot;&gt;:defer&lt;/span&gt; t
  &lt;span style=&quot;color: #16a085;&quot;&gt;:ensure&lt;/span&gt; t
  &lt;span style=&quot;color: #16a085;&quot;&gt;:diminish&lt;/span&gt; clj-refactor-mode
  &lt;span style=&quot;color: #16a085;&quot;&gt;:config&lt;/span&gt; (cljr-add-keybindings-with-prefix &lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;C-c C-m&quot;&lt;/span&gt;))

(&lt;span style=&quot;color: #d98c10;&quot;&gt;use-package&lt;/span&gt; &lt;span style=&quot;color: #e67e22;&quot;&gt;smartparens&lt;/span&gt;
  &lt;span style=&quot;color: #16a085;&quot;&gt;:defer&lt;/span&gt; t
  &lt;span style=&quot;color: #16a085;&quot;&gt;:ensure&lt;/span&gt; t
  &lt;span style=&quot;color: #16a085;&quot;&gt;:diminish&lt;/span&gt; smartparens-mode
  &lt;span style=&quot;color: #16a085;&quot;&gt;:init&lt;/span&gt;
  (setq sp-override-key-bindings
        &#39;((&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;C-&amp;lt;right&amp;gt;&quot;&lt;/span&gt; . nil)
          (&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;C-&amp;lt;left&amp;gt;&quot;&lt;/span&gt; . nil)
          (&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;C-)&quot;&lt;/span&gt; . sp-forward-slurp-sexp)
          (&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;M-&amp;lt;backspace&amp;gt;&quot;&lt;/span&gt; . nil)
          (&lt;span style=&quot;color: #0a74b9;&quot;&gt;&quot;C-(&quot;&lt;/span&gt; . sp-forward-barf-sexp)))
  &lt;span style=&quot;color: #16a085;&quot;&gt;:config&lt;/span&gt;
  (&lt;span style=&quot;color: #d98c10;&quot;&gt;use-package&lt;/span&gt; &lt;span style=&quot;color: #e67e22;&quot;&gt;smartparens-config&lt;/span&gt;)
  (sp-use-smartparens-bindings)
  (sp--update-override-key-bindings)
  &lt;span style=&quot;color: #16a085;&quot;&gt;:commands&lt;/span&gt; (smartparens-mode show-smartparens-mode))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Up next I&#39;ll cover a digestible subset of CIDER commands&amp;#x2026;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 18 Oct 2015 00:00:00 -0400</pubDate>
        <link>http://ccann.github.io/2015/10/18/cider.html</link>
        <guid isPermaLink="true">http://ccann.github.io/2015/10/18/cider.html</guid>
        
        <category>emacs</category>
        
        <category>cider</category>
        
        <category>clojure</category>
        
        
      </item>
    
  </channel>
</rss>
